using System;

namespace zadanie
{
    class Program
    {
        static void Main(string[] args)
        {
            // Начался отопительный сезон, в городе начали включать отопление и у жителей
            // возникают проблемы. Для решения этих проблем они идут в жэк. В жэке есть 3 окна:
            // 1. В первом окно помогает людям решить проблемы с отоплением (подключение и
            // тд);
            // 2. Во втором окне решают проблемы с оплатой отопления;
            // 3. В третье окно идут все остальные.
            // Необходимо создать класс жителя. У жителя есть: имя, номер паспорта (для
            // однозначной идентификации), проблема, темперамент . Проблема характеризуется
            // номером и описанием. Темперамент характеризуется степенью скандальности от 0 до
            // 10 (10-скандалист , 0-паинька), умом(1-умный, 0-тупой).
            // В каждое окно жители встают по очереди. Перед входом в жэк стоит сотрудница Зина,
            // которая уточняет у жителей, какая у них проблема и по ключевым словам определяет
            // их в нужное окно.
            // Если житель скандалист (от 5 и выше), то он не будет обращать внимание на очередь
            // и обгонит людей, которые впереди него (на сколько человек обгонять житель
            // спрашивает у пользователя). Если человек тупой, то он встаёт не в то окно, даже
            // несмотря на указание Зины (случайным образом). К Зине все выстраиваются по
            // правилу стека.
            Citizen[] citizens = new Citizen[]{
                new Citizen("Владимир", "проблемы с оплатой отопления", 4, 1),
                new Citizen("Иван", "проблемы с отоплением", 8, 1),
                new Citizen("Мария", "проверить оплату за отопление", 3, 1),
                new Citizen("Алексей", "жалоба на соседа", 5, 0),
                new Citizen("Ольга", "вопрос по отоплению", 2, 1),
                new Citizen("Дмитрий", "оформление субсидии", 7, 0),
                new Citizen("Александр", "уточнить долг по отоплению", 6, 1),
                new Citizen("Екатерина", "жалоба на холод в квартире", 4, 1),
                new Citizen("Сергей", "подключение отопления", 7, 1),
                new Citizen("Анна", "вопрос по субсидии", 3, 0),
                new Citizen("Николай", "ошибка в квитанции", 5, 1),
                new Citizen("Татьяна", "жалоба на отсутствие отопления", 8, 1),
                new Citizen("Михаил", "перерасчет за отопление", 2, 0),
                new Citizen("Юлия", "не приходит квитанция", 1, 1),
                new Citizen("Артем", "вопрос по ремонту отопления", 9, 0),
                new Citizen("Светлана", "проверить состояние счета", 3, 1),
                new Citizen("Игорь", "вопрос о перерасчете оплаты", 6, 0),
                new Citizen("Полина", "оформление жалобы на шум", 4, 1),
                new Citizen("Виктор", "жалоба на соседей", 10, 0),
                new Citizen("Олеся", "ошибка в расчетах отопления", 2, 1),
                new Citizen("Григорий", "утепление квартиры", 7, 1),
                new Citizen("Наталья", "задать вопрос по квитанции", 5, 1),
                new Citizen("Максим", "требование пересчитать оплату", 8, 0),
                new Citizen("Людмила", "вопрос по капитальному ремонту", 3, 1),
                new Citizen("Роман", "жалоба на соседей по лестничной площадке", 10, 1),
                new Citizen("Алла", "вопрос по подключению льгот", 1, 0),
                new Citizen("Степан", "требует компенсацию за холод", 9, 1),
                new Citizen("Дарья", "уточнить оплату отопления", 4, 1),
                new Citizen("Валентин", "жалоба на работу управляющей компании", 7, 0)};

            QueueManager Zina = new QueueManager();
            foreach (Citizen citizen in citizens)
            {
                Zina.AddToQueue(citizen);
            }
            Zina.ProcessQueue();
            Zina.PrintQueues();
        }
    }
}